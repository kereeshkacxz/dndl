services:
  db:
    container_name: ${POSTGRES_HOST}
    hostname: ${POSTGRES_HOST}
    image: postgres:latest
    env_file:
      - ./.env
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./backend/postgres-data:/var/lib/postgresql/data
    networks:
      - networkName

  backend:
    container_name: ${BACKEND_HOST}
    hostname: ${BACKEND_HOST}
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    ports:
      - '8080:8080'
    env_file:
      - ./.env
    environment:
      - BACKEND_HOST=${BACKEND_HOST}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend/app:/app
    networks:
      - networkName
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend1:8080/api/v1/health_check/ping"]
      interval: 5s
      timeout: 3s
      retries: 3

networks:
  networkName: